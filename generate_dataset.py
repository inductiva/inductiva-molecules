"""Generate a dataset of FluidBlock simulations.

The dataset contains variations of the viscosity, position, dimensions
and initial velocity of the block of fluid as it is released into the tank.

The dataset is generated by launching multiple simulations in parallel
using a MachineGroup. The MachineGroup is created with spot instances
to reduce the cost of the simulations.
"""

import os

import numpy as np

import inductiva
from lib import models
from lib import scenarios

# Constant parameters for all simulations
DENSITY = 1e3  # in kg/m^3
TANK_DIMENSIONS = [1., 1., 1.]  # in meters
SIMULATION_TIME = 3.  # in seconds
PARTICLE_RADIUS = 0.008  # in meters
OUTPUT_DIR = "dataset"
N_SIMULATIONS = 10

# Generate dataset with FluidBlock scenario
dataset_tasks = []

dataset_machines = inductiva.resources.MachineGroup(
    machine_type="c2-standard-4", num_machines=10, spot=True)
dataset_machines.start()

simulation_parameters = scenarios.SimulationParameters(
    simulation_time=SIMULATION_TIME, particle_radius=PARTICLE_RADIUS)

for i in range(N_SIMULATIONS):

    position = np.random.uniform(low=[0., 0., 0.],
                                 high=[0.5, 0.5, 0.5],
                                 size=(3,))

    # Compute vector of distance to the walls
    wall_distance = TANK_DIMENSIONS - position

    dimensions = np.random.uniform(low=0.05, high=wall_distance, size=(3,))
    velocity = np.random.uniform(low=-1., high=1., size=(3,))
    viscosity = 10**np.random.uniform(low=-6., high=1.)

    # Initialize Block parameters
    block = models.FluidBlock(DENSITY, viscosity, dimensions, position,
                              velocity)

    print(f"\n========== LAUNCHING SIMULATION {i}/{N_SIMULATIONS} ==========")
    scenario = scenarios.FluidBlockSplishSplash(block)
    task = scenario.simulate(sim_params=simulation_parameters,
                             machine_group=dataset_machines)

    dataset_tasks.append(task)

# Wait for simulation to finish and download results
for index, task in enumerate(dataset_tasks):
    print(f"\n========== WAITING FOR SIMULATION {index} TO FINISH ==========")
    task.wait()
    sim_name = "sim_" + str(index).zfill(4)
    output_directory = os.path.join(OUTPUT_DIR, sim_name)
    if task.get_status() == "success":
        output_dir = task.download_outputs(output_dir=output_directory)
    else:
        print(f"Simulation {index} failed with {task.get_status()}.")

dataset_machines.terminate()
